---
title: "An example cleaning script"
author: "Muhammad Nasir"
date: "02/21/2025"
output: html_document
editor: 
  markdown: 
    wrap: sentence
---

# Processing script

This file contains processing data for the Final Project titlled " The effects of multi environmental exposures on Tuberculosis Incidence in Asian and African countris".

***Variables in the study*** - Tuberculosis Incidence (Response Variable)

Independent Variables - Basic water - Safety Water - Greenhouse - PM2.5 - Basic Sanitation - Safe Sanitation - Slum - Fule_cooking

Control variables: - Human Development Index - Health Expenditure - GDP

# Setup

Load needed packages.
make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
library(purrr)
install.packages("ggplot2")
library(ggplot2)

```

# Data loading

In this project, I combined many datasets from many different sources.
I will load them one by one, then combine the dataset based on country name.

***Tuberculosis Incidence Dataset*** Tuberculosis Insidence dataset contains Estimated incidence of all forms of tuberculosis (per 100.000 population), it was obtained from World Bank Website.
https://data.worldbank.org/indicator/SH.TBS.INCD

```{r}
# note the use of the here() package and not absolute paths
tbi_location <- here::here("data","raw-data","tbi.csv")
tbi <- read.csv(tbi_location)

colnames(tbi)
```

```{r}
tbi <- tbi %>% 
  rename(country = Entity, year = Year, tbi=Estimated.incidence.of.all.forms.of.tuberculosis) %>%
  select(-Code)

saveRDS(tbi, here("data", "processed-data", "processed-tbi.rds"))
```

***Basic Water Dataset*** Basic Water dataset contains percentatge of People using at least basic drinking water services (% of population).
The data is from WHO/UNICEF Joint Monitoring Programme ( JMP ) for Water Supply, Sanitation and Hygiene ( washdata.org ).
https://databank.worldbank.org/reports.aspx?s
ource=2&series=SH.H2O.BASW.ZS&country=

```{r}
waterbasic_location <- here::here("data","raw-data","basicwater.xlsx")
waterbasic_raw <- read_excel (waterbasic_location)

summary(waterbasic_raw)
skimr::skim(waterbasic_raw)
```

Creating long table to make the table shape consitent to allow us to combine tables in the next steps

```{r}
waterbasic_raw <- waterbasic_raw %>% 
  select(-`Country Code`, - `1990 [YR1990]`, -`Series Name`, -`Series Code`)# delete potention confusing columns 

colnames(waterbasic_raw) <- gsub("\\[.*\\]", "", colnames(waterbasic_raw)) # to delete [YR.... ] in the columns 

# Reshape from wide to long format
waterbasic <- waterbasic_raw %>%
  pivot_longer(cols = -`Country Name`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_basicwater") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023) %>% # Remove rows where year is 2023
  rename(country = `Country Name`)

saveRDS(waterbasic, here("data", "processed-data", "processed-waterbasic.rds"))
```

***safely manage drinking water*** Fafely managed drinking water dataset is the percentage of People using safely managed drinking water services (% of population).
it is originally from WHO/UNICEF Joint Monitoring Programme ( JMP ) for Water Supply, Sanitation and Hygiene ( washdata.org ).
the data downloaded in World bank Dataset https://databank.worldbank.org/reports.aspx?s
ource=2&series=SH.H2O.SMDW.ZS&country=#

```{r}
safewater_location <- here::here("data","raw-data","safewater.csv")
safewater <- read.csv (safewater_location)

summary(safewater)
skimr::skim(safewater)
head(safewater )
colnames(safewater)
```

Creating long table to make the table shape consitent to allow us to combine tables in the next steps

```{r}
safewater <- safewater %>% 
  select(-`Series.Code`,, -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(safewater) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(safewater))  # to delete [YR.... ] in the columns 
safewater <- safewater %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 safewater <- safewater %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_safewater") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023

 
 saveRDS(safewater, here("data", "processed-data", "processed-safewater.rds"))
```

***Fuel for Cooking***

```{r}
cookingfuel_location <- here::here("data","raw-data","fule_cooking.xlsx")
cookingfuel <- read_excel (cookingfuel_location )

summary(cookingfuel)
skimr::skim(cookingfuel)
colnames(cookingfuel)
```

Creating long table to make the table shape consitent to allow us to combine tables in the next steps

```{r}
cookingfuel <- cookingfuel %>% 
  select(-`Series Code`, - `1990 [YR1990]`, -`Series Name`, -`Country Code`, `2023 [YR2023]`)# delete potention confusing columns 

colnames(cookingfuel) <- gsub("\\[.*\\]", "", colnames(cookingfuel))  # to delete [YR.... ] in the columns 

cookingfuel <- cookingfuel %>%
  rename(country = `Country Name`)

# Reshape from wide to long format
 cookingfuel <- cookingfuel %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_cleanfuel") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023

 saveRDS(cookingfuel, here("data", "processed-data", "processed-cookingfuel.rds"))
```

***Basic Sanitation***

```{r}
basicsanitation_location <- here::here("data","raw-data","basicsanitation.csv")
basicsanitation <- read.csv (basicsanitation_location)

summary(basicsanitation)
skimr::skim(basicsanitation)
```

```{r}
basicsanitation <- basicsanitation %>% 
  select(-`Series.Code`, , -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(basicsanitation) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(basicsanitation))  # to delete [YR.... ] in the columns 
basicsanitation <- basicsanitation %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 basicsanitation <- basicsanitation %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_basicsanitation") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
saveRDS(basicsanitation, here("data", "processed-data", "processed-basicsanitation.rds"))
```

***Safe Sanitation***

```{r}
safesanitation_location <- here::here("data","raw-data","safesanitation.csv")
safesanitation <- read.csv (basicsanitation_location)

summary(safesanitation)
skimr::skim(safesanitation)
```

```{r}
safesanitation <- safesanitation %>% 
  select(-`Series.Code`, , -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(safesanitation) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(safesanitation))  # to delete [YR.... ] in the columns 
safesanitation <- safesanitation %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 safesanitation <- safesanitation %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_safesanitation") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
saveRDS(safesanitation, here("data", "processed-data", "processed-safesanitation.rds"))
```

***Slum Area***

```{r}
slum_location <- here::here("data","raw-data","slum.xlsx")
slum <- read_excel (slum_location)

summary(slum)
skimr::skim(slum)
```

```{r}
slum <- slum %>% 
  select(-`Series Code`, - `1990 [YR1990]`, -`Series Name`, -`Country Code`, `2023 [YR2023]`)# delete potention confusing columns 

colnames(slum) <- gsub("\\[.*\\]", "", colnames(slum))  # to delete [YR.... ] in the columns 

slum <- slum %>%
  rename(country = `Country Name`)

# Reshape from wide to long format
 slum <- slum %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_slum") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023

saveRDS(slum, here("data", "processed-data", "processed-slum.rds"))
```

***Greenhouses***

```{r}
greenhouses_location <- here::here("data","raw-data","greenhouse.xlsx")
greenhouses <- read_excel (greenhouses_location)

summary(greenhouses)
skimr::skim(greenhouses)
```

```{r}
greenhouses <- greenhouses %>% 
  select(-`Series Code`, - `1990 [YR1990]`, -`Series Name`, -`Country Code`, `2023 [YR2023]`)# delete potention confusing columns 

colnames(greenhouses) <- gsub("\\[.*\\]", "", colnames(greenhouses))  # to delete [YR.... ] in the columns 

greenhouses <- greenhouses %>%
  rename(country = `Country Name`)

# Reshape from wide to long format
 greenhouses <- greenhouses %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "total_greenhouses") %>% # Total greenhouse gas in million metric cubic ton including emissions and removals from Land Use, Land-Use Change, and Forestry (LULUCF)
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
saveRDS(greenhouses, here("data", "processed-data", "processed-greenhouses.rds"))
```

***PM2.5***

```{r}
pm25_location <- here::here("data","raw-data","pm25.xlsx")
pm25 <- read_excel (pm25_location)

summary(pm25)
skimr::skim(pm25)
```

```{r}
pm25 <- pm25 %>% 
  select(-`Series Code`, - `1990 [YR1990]`, -`Series Name`, -`Country Code`, `2023 [YR2023]`)# delete potention confusing columns 

colnames(pm25) <- gsub("\\[.*\\]", "", colnames(pm25))  # to delete [YR.... ] in the columns 

pm25 <- pm25 %>%
  rename(country = `Country Name`)

# Reshape from wide to long format
 pm25 <- pm25 %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "mean_exposure_pm2.5") %>% #PM2.5 air pollution, mean annual exposure (micrograms per cubic meter)
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
 saveRDS(pm25, here("data", "processed-data", "processed-pm25.rds"))
```

***GDP***

```{r}
gdp_location <- here::here("data","raw-data","gdp.csv")
gdp <- read.csv (gdp_location)

summary(gdp)
skimr::skim(gdp)
```

```{r}
gdp <- gdp %>% 
  select(-`Series.Code`, , -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(gdp) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(gdp))  # to delete [YR.... ] in the columns 
gdp <- gdp %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 gdp <- gdp %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "gdp") %>% #US Dollar 
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
saveRDS(gdp, here("data", "processed-data", "processed-gdp.rds"))
```

***Human Development Index***

```{r}
hdi_location <- here::here("data","raw-data","hdi.csv")
hdi <- read.csv (hdi_location)

summary(hdi)
skimr::skim(hdi)

```

```{r}
hdi <- hdi %>%
  rename(country = Entity, year= Year, hdi= Human.Development.Index) %>%
  select(-Code) %>%
  filter(year >= 2000 & year <= 2020)

saveRDS(hdi, here("data", "processed-data", "processed-hdi.rds"))
```

***Combine dataset***

```{r}
#create list of dataset
datasets <- list(tbi, cookingfuel, waterbasic, safewater, slum, pm25, greenhouses, basicsanitation, safesanitation, gdp, hdi)

# Merge all datasets based on "country" and "year"
combined_df <- reduce(datasets, full_join, by = c("country", "year"))
```


***create region based on WHO Region*** 

```{r}



# Define regions
africa_countries <- c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cameroon", 
                      "Cape Verde", "Central African Republic", "Chad", "Comoros", "Ivory Coast", 
                      "Democratic Republic of the Congo", "Equatorial Guinea", "Eritrea", "Ethiopia", 
                      "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", 
                      "Liberia", "Madagascar", "Malawi", "Mali", "Mauritania", "Mauritius", "Mozambique", 
                      "Namibia", "Niger", "Nigeria", "Republic of the Congo", "Rwanda", 
                      "São Tomé and Príncipe", "Senegal", "Seychelles", "Sierra Leone", "South Africa", 
                      "South Sudan", "Eswatini", "Togo", "Uganda", "Tanzania", "Zambia", "Zimbabwe")

sear_countries <- c("Bangladesh", "Bhutan", "Democratic People's Republic of Korea", "India", "Indonesia", 
                    "Maldives", "Myanmar", "Nepal", "Sri Lanka", "Thailand", "Timor-Leste")

eur_countries <- c("Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", 
                   "Bosnia and Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", 
                   "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", 
                   "Ireland", "Israel", "Italy", "Kazakhstan", "Kyrgyzstan", "Latvia", "Lithuania", 
                   "Luxembourg", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "North Macedonia", 
                   "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", 
                   "Slovenia", "Spain", "Sweden", "Switzerland", "Tajikistan", "Turkey", "Turkmenistan", 
                   "Ukraine", "United Kingdom", "Uzbekistan")

emr_countries <- c("Afghanistan", "Bahrain", "Djibouti", "Egypt", "Iran", "Iraq", "Jordan", "Kuwait", 
                   "Lebanon", "Libya", "Morocco", "Oman", "Pakistan", "Qatar", "Saudi Arabia", "Somalia", 
                   "Sudan", "Syria", "Tunisia", "United Arab Emirates", "Yemen")

wpr_countries <- c("Australia", "Brunei", "Cambodia", "China", "Cook Islands", "Fiji", "Japan", "Kiribati", 
                   "Laos", "Malaysia", "Marshall Islands", "Micronesia", "Mongolia", "Nauru", "New Zealand", 
                   "Niue", "Palau", "Papua New Guinea", "Philippines", "Samoa", "Singapore", "Solomon Islands", 
                   "South Korea", "Taiwan", "Tonga", "Tuvalu", "Vanuatu", "Vietnam")

amr_countries <- c("Antigua and Barbuda", "Argentina", "Bahamas", "Barbados", "Belize", "Bolivia", "Brazil", 
                   "Canada", "Chile", "Colombia", "Costa Rica", "Cuba", "Dominica", "Dominican Republic", 
                   "Ecuador", "El Salvador", "Grenada", "Guatemala", "Guyana", "Haiti", "Honduras", "Jamaica", 
                   "Mexico", "Nicaragua", "Panama", "Paraguay", "Peru", "Saint Kitts and Nevis", "Saint Lucia", 
                   "Saint Vincent and the Grenadines", "Suriname", "Trinidad and Tobago", "Uruguay", "Venezuela")

# Add Region column
combined_df <- combined_df %>%
  mutate(region = case_when(
    country %in% africa_countries ~ "Africa",
    country %in% sear_countries ~ "South-East Asia",
    country %in% eur_countries ~ "Europe",
    country %in% emr_countries ~ "Eastern Mediterranean",
    country %in% wpr_countries ~ "Western Pacific",
    country %in% amr_countries ~ "Americas",
    TRUE ~ "Other"  # Assign "Other" to countries not in these regions
  ))


```


***Save the dataset to csv file***

```{r}

write.csv(combined_df, here("data", "processed-data", "combined-dataset.csv"), row.names = FALSE)
saveRDS(combined_df, here("data", "processed-data", "combined-dataset.rds"))
```

### Exluding slum dataset 

Slum dataset is different from other dataset, the observation is every 2 years.
I want to create subset without slum data

```{r}
no_slum <- combined_df %>% 
  select(-pro_slum) 


```

Now, I want to drop all NA observation

```{r}

no_slum <- no_slum %>%
  filter(if_all(everything(), ~ !is.na(.) & . != "" & . != ".."))
```

Now, I want to delete countries which have incomplete observation in all years.

```{r}
# Count the number of rows for each country
complete_countries <- no_slum %>%
  group_by(country) %>%
  summarise(row_count = n()) %>%
  filter(row_count == 21) %>%
  pull(country)  # Extract only countries with exactly 21 rows

# Keep only those countries in the dataset
clean_noslum <- no_slum %>%
  filter(country %in% complete_countries)

# Print first few rows to check
head(clean_noslum)


table(clean_noslum$year, clean_noslum$country) # to make sure that all countries have complete year 
dim(clean_noslum)

unique(clean_noslum$country)



```

```{r}
clean_noslum <- clean_noslum %>%
  mutate(across(c(pro_cleanfuel, pro_basicwater, pro_safewater, pro_basicsanitation, pro_safesanitation, mean_exposure_pm2.5, total_greenhouses, pro_basicsanitation, gdp), as.numeric))

summary(clean_noslum)


saveRDS(clean_noslum, here("data", "processed-data", "clean_noslum.rds")) # save the file 

```



### Creating clean dataset inlcuding slum

Note: Slum dataset only contain observation every two years. In this dataset, I will follow the year where slum has observation. 
```{r}
# Define the required years
required_years_alldata <- c(2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018, 2020)

# Filter the dataset for the required years
all_data <- combined_df %>%
  filter(year %in% required_years_alldata) %>%
  group_by(country) %>%
  filter(all(required_years_alldata %in% year)) %>%
  ungroup()


all_data  <- all_data  %>%
  filter(year %in% required_years_alldata) %>%  # Keep only required years
  group_by(country) %>%
  filter(n_distinct(year) == length(required_years_alldata)) %>%  # Ensure all years exist for each country
  ungroup()


all_data <- all_data %>%
  mutate(across(where(is.character), ~ na_if(.x, ".."))) %>%  # Convert ".." to NA only for character columns
  drop_na()  # Remove rows with any NA values


# View the filtered data
print(all_data )

unique(all_data$country)
# Optionally, save the filtered data to a new CSV file
#write.csv(filtered_hdi, "filtered_hdi_selected_years.csv", row.names = FALSE)
  
```

```{r}
ggplot(all_data, aes(x = year, y = tbi, group = country, color = country)) +
  geom_line(alpha = 0.7) +  # Transparency to see overlapping lines
  labs(title = "Spaghetti Plot of TBC Incidence",
       x = "Year",
       y = "TBC Incidence") +
  theme_minimal() +
  theme(legend.position = "none") 
```

```{r}
# convert variables into numeric

all_data <- all_data %>%
  mutate(across(c(pro_cleanfuel, pro_basicwater, pro_safewater, pro_slum, pro_basicsanitation, pro_safesanitation, mean_exposure_pm2.5, total_greenhouses, pro_basicsanitation, gdp), as.numeric))
summary(all_data)
str(all_data)

saveRDS(all_data, here("data", "processed-data", "clean_data_withslum.rds")) # save the file 
write.csv(all_data, here("data", "processed-data", "clean_data_withslum.csv"), row.names = FALSE)
unique(all_data$country)
```



```{r}
all_asiaafrica <- all_data %>% 
  filter(region %in% c("South-East Asia", "Africa"))

dim(all_asiaafrica)

unique(all_asiaafrica$country)

m2 <- lm(log(tbi) ~ pro_slum, data = all_asiaafrica)
summary(m2)

plot(m2)
```


```{r}
library(reshape2)  # To reshape data for ggplot

# Compute Spearman correlation matrix
cor_matrix_spearman_slum <- cor(all_asiaafrica[, c("tbi","gdp", "hdi", "pro_cleanfuel", "pro_safewater", 
                                           "pro_basicsanitation", "pro_safesanitation", "pro_slum")], 
                           method = "spearman", use = "complete.obs")

# Melt the matrix into long format for ggplot
cor_melted_slum <- melt(cor_matrix_spearman_slum)

# Plot heatmap
ggplot(cor_melted_slum, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0) +
  geom_text(aes(label = round(value, 2)), size = 4) +  # Show correlation values
  theme_minimal() +
  labs(title = "Spearman Correlation Heatmap", x = "", y = "")
```


```{r}
ggplot(all_asiaafrica, aes(x = year, y = pro_slum, group = country)) +
  geom_line() +
  facet_wrap(~ country) +  # Creates separate plots for each country
  theme_minimal()
```

