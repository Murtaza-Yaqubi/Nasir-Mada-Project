---
title: "An example cleaning script"
author: "Muhammad Nasir"
date: "02/21/2025"
output: html_document
editor: 
  markdown: 
    wrap: sentence
---

# Processing script

This file contains processing data for the Final Project titlled " The effects of water and sanitation on Tuberculosis Incidence in South East Asian and African countris".

***Variables in the study*** 
- Tuberculosis Incidence (Response Variable)

- Basic water, Safety Water, Basic Sanitation, Safe Sanitation, Human Development Index (Independent Variables )


# Setup

Load needed packages.
make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
library(purrr)
install.packages("ggplot2")
library(ggplot2)
install.packages("viridis")
library(viridisLite)

install.packages("tidyverse")
library(tidyverse)
install.packages("rsample") 
library(rsample)    

```

# Data loading

In this project, I combined many datasets from many different sources.
I will load them one by one, then combine the dataset based on country name.

***Tuberculosis Incidence Dataset*** Tuberculosis Insidence dataset contains Estimated incidence of all forms of tuberculosis (per 100.000 population), it was obtained from World Bank Website.
https://data.worldbank.org/indicator/SH.TBS.INCD

```{r}
# note the use of the here() package and not absolute paths
tbi_location <- here::here("data","raw-data","tbi.csv")
tbi <- read.csv(tbi_location)
```
```{r}
colnames(tbi)
```

```{r}
tbi <- tbi %>% 
  rename(country = Entity, year = Year, tbi=Estimated.incidence.of.all.forms.of.tuberculosis) %>%
  select(-Code)

saveRDS(tbi, here("data", "processed-data", "processed-tbi.rds"))
```

***Basic Water Dataset*** Basic Water dataset contains percentatge of People using at least basic drinking water services (% of population).
The data is from WHO/UNICEF Joint Monitoring Programme ( JMP ) for Water Supply, Sanitation and Hygiene ( washdata.org ).
https://databank.worldbank.org/reports.aspx?s
ource=2&series=SH.H2O.BASW.ZS&country=

```{r}
waterbasic_location <- here::here("data","raw-data","basicwater.xlsx")
waterbasic_raw <- read_excel (waterbasic_location)

summary(waterbasic_raw)
skimr::skim(waterbasic_raw)
```

Creating long table to make the table shape consitent to allow us to combine tables in the next steps

```{r}
waterbasic_raw <- waterbasic_raw %>% 
  select(-`Country Code`, - `1990 [YR1990]`, -`Series Name`, -`Series Code`)# delete potention confusing columns 

colnames(waterbasic_raw) <- gsub("\\[.*\\]", "", colnames(waterbasic_raw)) # to delete [YR.... ] in the columns 

# Reshape from wide to long format
waterbasic <- waterbasic_raw %>%
  pivot_longer(cols = -`Country Name`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_basicwater") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023) %>% # Remove rows where year is 2023
  rename(country = `Country Name`)

saveRDS(waterbasic, here("data", "processed-data", "processed-waterbasic.rds"))
```

***safely manage drinking water*** Fafely managed drinking water dataset is the percentage of People using safely managed drinking water services (% of population).
it is originally from WHO/UNICEF Joint Monitoring Programme ( JMP ) for Water Supply, Sanitation and Hygiene ( washdata.org ).
the data downloaded in World bank Dataset https://databank.worldbank.org/reports.aspx?s
ource=2&series=SH.H2O.SMDW.ZS&country=#

```{r}
safewater_location <- here::here("data","raw-data","safewater.csv")
safewater <- read.csv (safewater_location)

summary(safewater)
skimr::skim(safewater)
head(safewater )
colnames(safewater)
```

Creating long table to make the table shape consitent to allow us to combine tables in the next steps

```{r}
safewater <- safewater %>% 
  select(-`Series.Code`,, -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(safewater) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(safewater))  # to delete [YR.... ] in the columns 
safewater <- safewater %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 safewater <- safewater %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_safewater") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023

 
 saveRDS(safewater, here("data", "processed-data", "processed-safewater.rds"))
```


***Basic Sanitation***

```{r}
basicsanitation_location <- here::here("data","raw-data","basicsanitation.csv")
basicsanitation <- read.csv (basicsanitation_location)

summary(basicsanitation)
skimr::skim(basicsanitation)
```

```{r}
basicsanitation <- basicsanitation %>% 
  select(-`Series.Code`, , -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(basicsanitation) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(basicsanitation))  # to delete [YR.... ] in the columns 
basicsanitation <- basicsanitation %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 basicsanitation <- basicsanitation %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_basicsanitation") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
saveRDS(basicsanitation, here("data", "processed-data", "processed-basicsanitation.rds"))
```

***Safe Sanitation***

```{r}
safesanitation_location <- here::here("data","raw-data","safesanitation.csv")
safesanitation <- read.csv (basicsanitation_location)

summary(safesanitation)
skimr::skim(safesanitation)
```

```{r}
safesanitation <- safesanitation %>% 
  select(-`Series.Code`, , -`Series.Name`, -`Country.Code`)# delete potention confusing columns 

colnames(safesanitation) <-gsub("X(\\d+)..YR\\d+.", "\\1", colnames(safesanitation))  # to delete [YR.... ] in the columns 
safesanitation <- safesanitation %>%
  rename(country = Country.Name)

# Reshape from wide to long format
 safesanitation <- safesanitation %>%
  pivot_longer(cols = -`country`,  # All columns except 'Country' will be pivoted
               names_to = "year", 
               values_to = "pro_safesanitation") %>%
  mutate(year = as.integer(year)) %>%  # Convert Year to numeric
  filter(year != 2023)  # Remove rows where year is 2023
 
saveRDS(safesanitation, here("data", "processed-data", "processed-safesanitation.rds"))
```


***Human Development Index***

```{r}
hdi_location <- here::here("data","raw-data","hdi.csv")
hdi <- read.csv (hdi_location)

summary(hdi)
skimr::skim(hdi)

```

```{r}
hdi <- hdi %>%
  rename(country = Entity, year= Year, hdi= Human.Development.Index) %>%
  select(-Code) %>%
  filter(year >= 2000 & year <= 2020)

saveRDS(hdi, here("data", "processed-data", "processed-hdi.rds"))
```

***Combine dataset***

```{r}
#create list of dataset
datasets <- list(tbi,  waterbasic, safewater,  basicsanitation, safesanitation, hdi)

# Merge all datasets based on "country" and "year"
combined_df <- reduce(datasets, full_join, by = c("country", "year"))

saveRDS(hdi, here("data", "processed-data", "combined-data.rds"))
```


***create region based on WHO Region*** 

```{r}



# Define regions
africa_countries <- c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cameroon", 
                      "Cape Verde", "Central African Republic", "Chad", "Comoros", "Ivory Coast", 
                      "Democratic Republic of the Congo", "Equatorial Guinea", "Eritrea", "Ethiopia", 
                      "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", 
                      "Liberia", "Madagascar", "Malawi", "Mali", "Mauritania", "Mauritius", "Mozambique", 
                      "Namibia", "Niger", "Nigeria", "Republic of the Congo", "Rwanda", 
                      "São Tomé and Príncipe", "Senegal", "Seychelles", "Sierra Leone", "South Africa", 
                      "South Sudan", "Eswatini", "Togo", "Uganda", "Tanzania", "Zambia", "Zimbabwe")

sear_countries <- c("Bangladesh", "Bhutan", "Democratic People's Republic of Korea", "India", "Indonesia", 
                    "Maldives", "Myanmar", "Nepal", "Sri Lanka", "Thailand", "Timor-Leste")

eur_countries <- c("Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", 
                   "Bosnia and Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", 
                   "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", 
                   "Ireland", "Israel", "Italy", "Kazakhstan", "Kyrgyzstan", "Latvia", "Lithuania", 
                   "Luxembourg", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "North Macedonia", 
                   "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", 
                   "Slovenia", "Spain", "Sweden", "Switzerland", "Tajikistan", "Turkey", "Turkmenistan", 
                   "Ukraine", "United Kingdom", "Uzbekistan")

emr_countries <- c("Afghanistan", "Bahrain", "Djibouti", "Egypt", "Iran", "Iraq", "Jordan", "Kuwait", 
                   "Lebanon", "Libya", "Morocco", "Oman", "Pakistan", "Qatar", "Saudi Arabia", "Somalia", 
                   "Sudan", "Syria", "Tunisia", "United Arab Emirates", "Yemen")

wpr_countries <- c("Australia", "Brunei", "Cambodia", "China", "Cook Islands", "Fiji", "Japan", "Kiribati", 
                   "Laos", "Malaysia", "Marshall Islands", "Micronesia", "Mongolia", "Nauru", "New Zealand", 
                   "Niue", "Palau", "Papua New Guinea", "Philippines", "Samoa", "Singapore", "Solomon Islands", 
                   "South Korea", "Taiwan", "Tonga", "Tuvalu", "Vanuatu", "Vietnam")

amr_countries <- c("Antigua and Barbuda", "Argentina", "Bahamas", "Barbados", "Belize", "Bolivia", "Brazil", 
                   "Canada", "Chile", "Colombia", "Costa Rica", "Cuba", "Dominica", "Dominican Republic", 
                   "Ecuador", "El Salvador", "Grenada", "Guatemala", "Guyana", "Haiti", "Honduras", "Jamaica", 
                   "Mexico", "Nicaragua", "Panama", "Paraguay", "Peru", "Saint Kitts and Nevis", "Saint Lucia", 
                   "Saint Vincent and the Grenadines", "Suriname", "Trinidad and Tobago", "Uruguay", "Venezuela")

# Add Region column
combined_df <- combined_df %>%
  mutate(region = case_when(
    country %in% africa_countries ~ "Africa",
    country %in% sear_countries ~ "South-East Asia",
    country %in% eur_countries ~ "Europe",
    country %in% emr_countries ~ "Eastern Mediterranean",
    country %in% wpr_countries ~ "Western Pacific",
    country %in% amr_countries ~ "Americas",
    TRUE ~ "Other"  # Assign "Other" to countries not in these regions
  ))


```


***Save the dataset to csv file***

```{r}

write.csv(combined_df, here("data", "processed-data", "combined-dataset.csv"), row.names = FALSE)
saveRDS(combined_df, here("data", "processed-data", "combined-dataset.rds"))
```


Now, I want to drop all NA observation

```{r}

combined_df <- combined_df %>%
  filter(if_all(everything(), ~ !is.na(.) & . != "" & . != ".."))
```

Now, I want to delete countries which have incomplete observation in all years.

```{r}
# Count the number of rows for each country
complete_countries <- combined_df %>%
  group_by(country) %>%
  summarise(row_count = n()) %>%
  filter(row_count == 21) %>%
  pull(country)  # Extract only countries with exactly 21 rows

# Keep only those countries in the dataset
combined_df <- combined_df %>%
  filter(country %in% complete_countries)

# Print first few rows to check
head(combined_df)


table(combined_df$year, combined_df$country) # to make sure that all countries have complete year 
dim(combined_df)

unique(combined_df$country)



```

```{r}
write.csv(combined_df, here("data", "processed-data", "combined-df.csv"), row.names = FALSE)

```



***Only including countries from Couth East Asia and African COuntries*** 

```{r}
asia_africa <- combined_df %>% 
  filter(region %in% c("South-East Asia", "Africa"))

dim(asia_africa)

unique(asia_africa$region)


# save the asia africa dataset

write.csv(combined_df, here("data", "processed-data", "asia_africa.csv"), row.names = FALSE)
saveRDS(combined_df, here("data", "processed-data", "asia_africa.rds"))
```

***Visualize TBI*** 
```{r}

# Line plot of TBI over time by country
ggplot(asia_africa, aes(x = year, y = tbi, group = country, color = country)) +
  geom_line(alpha = 0.7) +
  labs(title = "TBI Trends in Asia and Africa (2000–2020)",
       x = "Year",
       y = "TBI") +
  theme_minimal() +
  theme(legend.position = "none")  # Hide legend if there are many countries


```

It can be seen that Lesotho has very high observation and potentially become outlier. It is better to drop the observation. 

```{r}
seaa <- asia_africa%>%
  filter(country != "Lesotho") 

#save the final dataset 
write.csv(seaa, here("data", "processed-data", "seaa.csv"), row.names = FALSE)
saveRDS(seaa, here("data", "processed-data", "seaa.rds"))
```

```{r}
# Line plot of TBI over time by country
ggplot(seaa, aes(x = year, y = tbi, group = country, color = country)) +
  geom_line(alpha = 0.7) +
  labs(title = "TBI Trends in Asia and Africa (2000–2020)",
       x = "Year",
       y = "TBI") +
  theme_minimal() +
  theme(legend.position = "none")  # Hide legend if there are many countries
```



```{r}

ggplot(asia_africa, aes(x = year, y = tbi, group = country, color = country)) +
  geom_line(alpha = 0.9) +
  facet_wrap(~ region) +
  scale_color_viridis_d(option = "turbo") +  # "plasma", "cividis", or "turbo" are good options
  labs(title = "TBI Trends (2000–2020) by Region",
       x = "Year",
       y = "TBI",
       color = "Country") +
  theme_minimal() +
  theme(legend.position = "right",
        legend.key.height = unit(0.5, "cm"),
        legend.text = element_text(size = 8))

```


# Machine Learning Data 
I will create machine learning data 

```{r}
# create setseed for reproductibility 
ml_seed <- set.seed(2345)

# Split dataset into a 75% train set and a 25% test set

splitted_ml <- initial_split(asia_africa, prop= .75)
df_train <- training(splitted_ml)
df_test <- testing(splitted_ml)



# Save training set
saveRDS(df_train, file = here("data", "processed-data", "df_train.rds"))

# Save test set
saveRDS(df_test, file = here("data", "processed-data", "df_test.rds"))


```



